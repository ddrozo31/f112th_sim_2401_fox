controller_manager:
  ros__parameters:
    update_rate: 50 # Hz
    use_sim_time: true

    bicycle_drive_controller:
      type: bicycle_steering_controller/BicycleSteeringController

    joint_state_broadcaster:
      type: joint_state_broadcaster/JointStateBroadcaster

bicycle_drive_controller:
  ros__parameters:
    # Model
    traction_joint_name: ['back_wheel_joint'] # Name of traction joint in URDF
    steering_joint_name: ['front_steering_joint'] # Name of steering joint in URDF
    front_steering: true 
    wheel_radius: 0.035 # Radius of rear wheel
    wheelbase: 0.208 # Distance between center of rear wheel and front wheel
    # Odometry
    odom_frame_id: odom
    base_frame_id: base_link
    publish_rate: 50.0 # publish rate of odom and tf
    open_loop: false # if True, uses cmd_vel instead of hardware interface feedback to compute odometry
    enable_odom_tf: true # If True, publishes odom<-base_link TF
    odom_only_twist: false # If True, publishes on /odom only linear.x and angular.z; Useful for computing odometry in another node, e.g robot_localization's ekf
    pose_covariance_diagonal: [0.0, 7.0, 14.0, 21.0, 28.0, 35.0] # Need to be set if fusing odom with other localization source
    twist_covariance_diagonal: [0.0, 7.0, 14.0, 21.0, 28.0, 35.0] # Need to be set if fusing odom with other localization source
    velocity_rolling_window_size: 10 # Rolling window size of rcppmath::RollingMeanAccumulator applied on linear and angular speeds published on odom
    
    # cmd_vel input
    cmd_vel_timeout: 500 # In milliseconds. Timeout to stop if no cmd_vel is received
    use_stamped_vel: false # Set to True if using TwistStamped.
    # Debug
    publish_ackermann_command: true # Publishes AckermannDrive. The speed does not comply to the msg definition, it the wheel angular speed in rad/s.
